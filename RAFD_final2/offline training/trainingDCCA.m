function [DCCA_para]=trainingDCCA(input,output,far_matix)
% training DPCA: online fault detection by using the method of Dynamic
%             Canonical Correlation Analysis
%              
% Call:
%        [DCCA_para]=trainingDCCA(input,output,far_matix)
%
% Inputs:
%             input     - input data
%             output    - output data
%            far_matix - the custom given paramter matrix to estimate FAR
%                        (in which such as acceptable FAR is given)
% Outputs: 
%         DCCA_para - the process paramters to do fault detection
% Notes: NONE

% -------------------------------------------------------------------------
% University of Duisburg-Essen (Campus Duisburg)
% Faculty of Engineering
% Institute for Automatic Control and Complex Systems (AKS)
% Bismarckstr. 81
% D-47057 Duisburg, Germany

% -------------------------------------------------------------------------
%% preprocess 

% Hankel matrix generated by using s_p,s_f, which calculated by autocorrelation test
D = diag([output';input']*[output';input']');
[ACF, lags] = autocorr(D);
lag_max = 20;
for ii=1:lag_max
    if ACF(ii)<=0.05
       break 
    end
end

s_f = lags(ii); % recommend to use user-defined lags.

k = 2*s_f-1;

[input_f,output_f,input_p,output_p] = cons_hankel(output',input',s_f,k);


% normalization
[input_f_norm] = normalizedata(input_f');
[input_p_norm] = normalizedata(input_p');
[output_f_norm] = normalizedata(output_f');
[output_p_norm] = normalizedata(output_p');

Z_p = [output_p_norm;input_p_norm];


[P,~, L,~,Omega,~] = ccastat_new(Z_p,output_f_norm);

[~,samplesize] = size(Z_p);

%%% (FAR)
%%%%%%%
DCCA_para.s_f=s_f;
DCCA_para.P=P;
DCCA_para.L=L;
DCCA_para.Omega=Omega;

if far_matix(1,2)==0;
    sig_level=far_matix(1,1)/100;
    CCA = zeros(1,samplesize);  

    for i =1:samplesize
        temp1 = L'*output_f_norm(:,i)-Omega*P'*Z_p(:,i);
        CCA(i) = temp1'*temp1;
    end
    a=mean(CCA(1:floor(0.5*samplesize)));
    b=var(CCA(1:floor(0.5*samplesize)));
    DCCA_para.J_th_CCA=(b/(2*a))*chi2inv(1-sig_level,2*(a^2)/b);   % threshold calculation
else
    DCCA_para.J_th_CCA= far_matix(1,2);
end
